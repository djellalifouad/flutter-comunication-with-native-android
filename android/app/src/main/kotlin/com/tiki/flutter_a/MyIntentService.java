package com.tiki.flutter_a;import android.app.Notification;import android.app.NotificationChannel;import android.app.NotificationManager;import android.app.PendingIntent;import android.app.Service;import android.content.Context;import android.content.Intent;import android.hardware.Sensor;import android.hardware.SensorEvent;import android.hardware.SensorEventListener;import android.hardware.SensorManager;import android.hardware.camera2.CameraAccessException;import android.hardware.camera2.CameraManager;import android.os.Build;import android.os.IBinder;import androidx.annotation.Nullable;import androidx.annotation.RequiresApi;import androidx.core.app.NotificationCompat;import java.util.EventListener;@RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)public class MyIntentService  extends Service implements SensorEventListener {    public  MyIntentService() {}    @Override    public void onCreate() {        System.out.println("test");        SensorManager sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);        Sensor proximity = sensorManager.getDefaultSensor(Sensor.TYPE_PROXIMITY);        sensorManager.registerListener(this,proximity,SensorManager.SENSOR_DELAY_NORMAL);        super.onCreate();    }    @Override    public int onStartCommand(Intent startIntent, int flags, int startId) {        Intent notificationIntent = new Intent(this, MainActivity.class);        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0,                notificationIntent, 0);        NotificationManager notificationManager =(NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE);        String channelId = "my_channel_id";        CharSequence channelName = "My Channel";        int importance = NotificationManager.IMPORTANCE_HIGH;        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) { NotificationChannel notificationChannel = new                NotificationChannel(channelId, channelName, importance);            notificationManager.createNotificationChannel(notificationChannel);}        Notification notification =                new NotificationCompat.Builder(this, channelId)                        .setContentTitle("Lecture en cours")                        .setContentText("Tahir ve Nafess") .                        setSmallIcon(R.drawable.testtest)                        .setContentIntent(pendingIntent)                        .build();        startForeground(110, notification);        return START_STICKY;    }    @Nullable    @Override    public IBinder onBind(Intent intent) {        System.out.println("bind");        return null;    }    @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP)    @Override    public void onSensorChanged(SensorEvent sensorEvent) {        System.out.println("work");        if(sensorEvent.sensor.getType() == Sensor.TYPE_PROXIMITY) {            float x  = sensorEvent.values[0];            if(true) {                CameraManager cameraManager = (CameraManager) getSystemService(Context.CAMERA_SERVICE);                try {                    String cameraId = cameraManager.getCameraIdList()[0];                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {                        cameraManager.setTorchMode(cameraId,true);                    }                } catch (CameraAccessException e) {                    System.out.println("exceptiton");                    e.printStackTrace();                }            }        }    }    @Override    public void onAccuracyChanged(Sensor sensor, int i) {      System.out.println(sensor.toString());    }}